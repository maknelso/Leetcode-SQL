1. All People Report to the Given Manager - REDO

SELECT E1.employee_id
FROM Employees E1, Employees E2,Employees E3
WHERE E1.manager_id = E2.employee_id
  AND E2.manager_id = E3.employee_id
  AND E3.manager_id = 1 
  AND E1.employee_id <> 1;

*need to figure out the E1, E2, E3s...

2. Project Employees III

SELECT project_id, employee_id
FROM Project JOIN Employee USING(employee_id)
WHERE(project_id, experience_years) IN(SELECT project_id, MAX(experience_years)       /*need to group project_id, experience_years together*/
                                       FROM Employee JOIN Project USING(employee_id)
                                       GROUP BY project_id);


3. Active Business - harder

SELECT business_id
FROM Events E1 JOIN
(SELECT event_type, AVG(occurences) AS events_avg
 FROM Events GROUP BY event_type) E2
ON E1.event_type = E2.event_type
GROUP BY business_id
HAVING SUM(CASE WHEN E1.occurences > E2.events_avg THEN 1 ELSE 0 END) > 1;     /*don't really get this part*/

4. Last Person to Ft in the Elevator - REDO - medium hard - somewhat common

SELECT person_name
FROM(SELECT Q1.person_name, SUM(Q2.weight) AS weight_cumulated
     FROM Queue AS Q1
     LEFT JOIN Queue AS Q2 ON Q2.turn <= Q1.turn
     GROUP BY Q1.person_id
     ORDER BY Q1.turn DESC) AS q
WHERE weight_cumulated <= 1000
LIMIT 1;

5. Game Play Analysis III - somewhat common - need to redo

SELECT A1.player_id, A1.event_date, SUM(A2.games_played) AS games_played_so_far
FROM Activity A1 JOIN Activity A2 ON (A1.player_id = A2.player_id AND A2.event_date <= A1.event_date)
GROUP BY A1.player_id, A1.event_date; 


6. Customers Who Bought All Products - need to redo

SELECT customer_id
FROM Customer
GROUP By customer_id
HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM product);   /*don't get this last line*/

7. Monthly Transactions I - SQL substring, trans_date

SELECT SUBSTRING(trans_date, 1, 7) AS month, country, COUNT(*) AS trans_count, 
SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count,
SUM(amount) AS trans_total_amount
SUM(CASE WHEN state = 'approved' THEN SUM ELSE 0 END) AS approved_total_amount,
FROM Transactions
GROUP BY country, month;

8. Page Recommendations - REDO - understood the solution

SELECT DISTINCT page_id AS recommended_page
FROM Likes
WHERE user_id IN(SELECT user1_id FROM Friendship WHERE user2_id = 1
                 UNION                                                  /*cannot use OR, have to use UNION*/
                 SELECT user2_id FROM Friendship WHERE user1_id = 1)
AND page_id NOT IN(SELECT page_id
                   FROM Likes
                   WHERE user_id = 1);
                   

9. Managers with at least 5 Direct Reports - FROM subquery is a temporary table

SELECT Name
FROM Employee AS E1 JOIN(SELECT ManagerId
                         FROM Employee
                         GROUP BY ManagerId
                         HAVING COUNT(ManagerId) >= 5) AS E2
ON E1.Id = E2.ManagerId;


10. Highest Grade For Each Student - REDO

SELECT student_id, MIN(course_id) AS 'course_id', grade AS 'grade'
FROM Enrollments
WHERE (student_id, grade) IN(SELECT student_id, MAX(grade)            /*WHERE with two conditions*/
                             FROM Enrollments
                             GROUP BY student_id)
GROUP BY student_id
ORDER BY student_id ASC;

11. Tree Node - kind of common - REDO - not too hard

Can do with UNION, CASE or IF

SELECT id,
CASE 
    WHEN p_id IS NULL THEN 'Root'
    WHEN id IN (SELECT p_id FROM tree) THEN 'Inner'
    ELSE 'Leaf'
    END AS 'Type'                                     /*END AS - you are calling the column "Type"*/
FROM tree;


IF /*IF(condition, value_if_true, value_if_false)*/:

SELECT id, IF(ISNULL(p_id), 'Root',                           /*first IF, if it's null - then Root
IF(id IN (SELECT p_id FROM tree), 'Inner','Leaf')) AS Type    /*second IF, if id is in p_id, then Inner, otherwise Leaf - calling column Type*/

FROM Tree
ORDER BY id;


12. Product Price at a Given Date

SELECT product_id, new_price AS price
FROM Products
WHERE(product_id, change_date) IN(SELECT product_id, MAX(change_date)
                                  FROM Products
                                  WHERE change_date <= '2019-08-16'
                                  GROUP BY product_id)
UNION
SELECT product_id, 10 AS price                                            /*do not fully understand the 2nd half of the UNION*/
FROM Products
WHERE Product_id NOT IN(SELECT product_id
                        FROM Products
                        WHERE change_date <= '2018-08-16');           


13. Exchange Seats - quite common - need to study more 

SELECT(CASE
        WHEN MOD(id, 2) <> 0 AND counts <> id THEN id + 1
        WHEN MOD(id, 2) <> 0 AND counts = id THEN id
        ELSE id - 1
      END) AS id, student
FROM seat, (SELECT
              COUNT(*) AS counts
            FROM seat) AS seat_counts
ORDER BY id ASC;
      


14. Shortest Distance in a Plane

15. Immediate Food Delivery II

16. Market Analysis I

17. Team Scores in Football Tournament

18. Investments in 2016

19. Friend Requests II: Who Has the Most Friends

20. Product Sales Analysis III

21. Article Views II

22. Monthly Transactions II

23. Count Student Number in Departments

24. Game Play Analysis IV

25. New Users Daily Count

26. Unpopular Books

27. Rank Scores

28. Winning Candidate

29. Consecutive Numbers

30. Get Highest Answer Rate Question

31. Reported Posts II

32. Department Highest Salary

33. Nth Highest Salary

34. Second Degree Follower





