1. All People Report to the Given Manager - REDO

SELECT E1.employee_id
FROM Employees E1, Employees E2, Employees E3
WHERE E1.manager_id = E2.employee_id            /*Where E1 is the employees of the E2 managers*/
  AND E2.manager_id = E3.employee_id            /*Where E2 is the employees of the E3 managers*/
  AND E3.manager_id = 1                         /*E3 is the boss*/
  AND E1.employee_id <> 1;


2. Project Employees III

SELECT project_id, employee_id
FROM Project JOIN Employee USING(employee_id)
WHERE(project_id, experience_years) IN(SELECT project_id, MAX(experience_years)  /*need to group project_id, experience_years together*/
                                       FROM Employee JOIN Project USING(employee_id)
                                       GROUP BY project_id);


3. Active Business - harder

SELECT business_id
FROM Events E1 JOIN (SELECT event_type, AVG(occurences) AS events_avg FROM Events GROUP BY event_type) E2
ON E1.event_type = E2.event_type
GROUP BY business_id
HAVING SUM(CASE WHEN E1.occurences > E2.events_avg THEN 1 ELSE 0 END) > 1;   /*don't really get this part - active business have occurrences greater than avg*/


4. Last Person to Ft in the Elevator - REDO - medium hard - somewhat common

SELECT person_name
FROM(SELECT Q1.person_name, SUM(Q2.weight) AS weight_cumulated
     FROM Queue AS Q1
     LEFT JOIN Queue AS Q2 ON Q2.turn <= Q1.turn
     GROUP BY Q1.person_id
     ORDER BY Q1.turn DESC) AS q
WHERE weight_cumulated <= 1000
LIMIT 1;


5. Game Play Analysis III - somewhat common - need to redo

SELECT A1.player_id, A1.event_date, SUM(A2.games_played) AS games_played_so_far
FROM Activity A1 JOIN Activity A2 ON (A1.player_id = A2.player_id AND A2.event_date <= A1.event_date)
GROUP BY A1.player_id, A1.event_date; 


6. Customers Who Bought All Products - need to redo

SELECT customer_id
FROM Customer
GROUP By customer_id
HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM product);   /*don't get this last line*/


7. Monthly Transactions I - SQL substring, trans_date

/*SUBSTRING(string, start, length)*/

SELECT SUBSTRING(trans_date, 1, 7) AS month, country, COUNT(*) AS trans_count, 
SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count,
SUM(amount) AS trans_total_amount
SUM(CASE WHEN state = 'approved' THEN SUM ELSE 0 END) AS approved_total_amount,
FROM Transactions
GROUP BY country, month;


8. Page Recommendations - REDO - understood the solution

SELECT DISTINCT page_id AS recommended_page
FROM Likes
WHERE user_id IN(SELECT user1_id FROM Friendship WHERE user2_id = 1
                 UNION                                                  /*cannot use OR, have to use UNION*/
                 SELECT user2_id FROM Friendship WHERE user1_id = 1)
AND page_id NOT IN(SELECT page_id
                   FROM Likes
                   WHERE user_id = 1);
                   

9. Managers with at least 5 Direct Reports - FROM subquery is a temporary table

SELECT Name
FROM Employee AS E1 JOIN(SELECT ManagerId
                         FROM Employee
                         GROUP BY ManagerId
                         HAVING COUNT(ManagerId) >= 5) AS E2
ON E1.Id = E2.ManagerId;


10. Highest Grade For Each Student - REDO

SELECT student_id, MIN(course_id) AS 'course_id', grade AS 'grade'
FROM Enrollments
WHERE (student_id, grade) IN(SELECT student_id, MAX(grade)            /*WHERE with two conditions*/
                             FROM Enrollments
                             GROUP BY student_id)
GROUP BY student_id
ORDER BY student_id ASC;


11. Tree Node - kind of common - REDO - not too hard

Can do with UNION, CASE or IF

SELECT id,
CASE 
    WHEN p_id IS NULL THEN 'Root'
    WHEN id IN (SELECT p_id FROM tree) THEN 'Inner'
    ELSE 'Leaf'
    END AS 'Type'                                     /*END AS - you are calling the column "Type"*/
FROM tree;


IF /*IF(condition, value_if_true, value_if_false)*/:

SELECT id, IF(ISNULL(p_id), 'Root',                           /*first IF, if it's null - then Root
IF(id IN (SELECT p_id FROM tree), 'Inner','Leaf')) AS Type    /*second IF, if id is in p_id, then Inner, otherwise Leaf - calling column Type*/

FROM Tree
ORDER BY id;


12. Product Price at a Given Date

SELECT product_id, new_price AS price
FROM Products
WHERE(product_id, change_date) IN(SELECT product_id, MAX(change_date)
                                  FROM Products
                                  WHERE change_date <= '2019-08-16'
                                  GROUP BY product_id)
UNION
SELECT product_id, 10 AS price          /*do not fully understand the 2nd half of the UNION - why does the 2 2019-08-17 not show up?*/
FROM Products
WHERE Product_id NOT IN(SELECT product_id
                        FROM Products
                        WHERE change_date <= '2018-08-16');           


13. Exchange Seats - quite common - need to study more 

SELECT(CASE
        WHEN MOD(id, 2) <> 0 AND counts <> id THEN id + 1
        WHEN MOD(id, 2) <> 0 AND counts = id THEN id
        ELSE id - 1
      END) AS id, student
FROM seat, (SELECT
              COUNT(*) AS counts
            FROM seat) AS seat_counts
ORDER BY id ASC;
      

14. Shortest Distance in a Plane - need to restudy

SELECT ROUND(SQRT(MIN((POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2)))), 2) AS shortest
FROM point_2d p1 JOIN point_2d p2 ON p1.x <> p2.x OR p1.y <> p2.y;

/*The euclidean distance between two points P1(x1,y1) and P2(x2, y2) in two dimensions is defined as \sqrt{(x1-x2)^2+(y1-y2)^2} 
So in order to get the distances, we can join this table with itself, and then utilize the built-in function POW() and SQRT() like below.*/


15. Immediate Food Delivery II - sometimes show up

*need to figure out if the 1st order is scheduled or not.

/*first line gives you 2/4 or 0.50, but we want 50.00, so we have to *100, and then ROUND it by 2*/

SELECT ROUND(AVG(CASE(WHEN order_date = customer_pref_delivery_date THEN 1 ELSE 0 END)*100, 2) AS 'immediate_percentage'
FROM Delivery
WHERE (customer_id, order_date) IN (SELECT customer_id, MIN(order_date)     /*SELECT first order */
                                    FROM Delivery 
                                    GROUP BY customer_id);      


16. Market Analysis I - need to figure out LEFT JOIN EXAMPLE - might need it because there are 2 requirements, if first requirement
is not met, then it becomes NULL, but we want to keep the NULL

SELECT user_id AS buyer_id, join_date, COUNT(order_id) AS orders_in_2019
FROM Users LEFT JOIN Orders ON Users.user_id = Orders.buyer_id AND YEAR(order_date) = '2019'    /*not 100% sure why we need LEFT JOIN*/
GROUP BY user_id
ORDER BY user_id;               /*implicit ASC*/


17. Team Scores in Football Tournament - LEFT JOIN REASON might be same as above - two requirements, don't want to lose if NULL..?

SELECT team_id, team_name, 
SUM(CASE WHEN team_id = host_team AND host_goals > guest goals THEN 3 ELSE 0 END) + 
SUM(CASE WHEN team_id = guest_team AND guest_goals > host_goals THEN 3 ELSE 0 END) +
SUM(CASE WHEN team_id = host_team AND host_goals = guest_goals THEN 1 ELSE 0 END) +
SUM(CASE WHEN team_id = guest_team AND guest_goals = host_goals THEN 1 ELSE 0 END)
AS num_points
FROM Teams LEFT JOIN Matches ON team_id = host_team OR team_id = guest_team
GROUP BY team_id
ORDER BY num_points DESC, team_id;


18. Investments in 2016 - not too hard - REDO

/*can use GROUP BY and COUNT to check whether a value in a column is unique*/
/*check whether the value of TIV_2015 is unique, and if its location is unique*/

SELECT SUM(insurance.TIV_2016) AS TIV_2016
FROM insurance
WHERE TIV_2015 IN (SELECT TIV_2015
                   FROM insurance
                   GROUP BY TIV_2015
                   HAVING COUNT(*) > 1)
AND (LAT,LON) IN (SELECT LAT, LON
                  FROM insurance
                  GROUP BY LAT, LON
                  HAVING COUNT(*) = 1);
                   
                   
19. Friend Requests II: Who Has the Most Friends - quite common on exam - not too hard either

SELECT ids AS id , COUNT(*) as num
FROM (SELECT requester_id AS ids FROM request_accepted
      UNION ALL                                                 /*keeps all the values, UNION deletes non-distinct values*/
      SELECT accepter_id AS ids FROM request_accepted) AS u
GROUP BY ids
ORDER BY COUNT(*) DESC
LIMIT 1;


20. Product Sales Analysis III - not that hard - shows up on exam

SELECT product_id, year AS first_year, quantity, price
FROM Sales
WHERE (product_id, year) IN (SELECT product_id, MIN(year) AS year
                             FROM Sales
                             GROUP BY product_id);   


21. Article Views II

SELECT DISTINCT viewer_id AS id
FROM Views
GROUP BY viewer_id, view_date
HAVING COUNT(DISTINCT article_id) > 1
ORDER BY id;


22. Monthly Transactions II - seems difficult - skipped it

SELECT month, country, SUM(CASE WHEN state = "approved" THEN 1 ELSE 0 END) AS approved_count, SUM(CASE WHEN state = "approved" THEN amount ELSE 0 END) AS approved_amount, SUM(CASE WHEN state = "back" THEN 1 ELSE 0 END) AS chargeback_count, SUM(CASE WHEN state = "back" THEN amount ELSE 0 END) AS chargeback_amount

FROM (SELECT LEFT(chargebacks.trans_date, 7) AS month, country, "back" AS state, amount
      FROM chargebacks
      JOIN transactions ON chargebacks.trans_id = transactions.id
      UNION ALL
      SELECT LEFT(trans_date, 7) AS month, country, state, amount
      FROM transactions
      WHERE state = "approved"
) s
GROUP BY month, country;


23. Count Student Number in Departments - pretty easy, got it by myself

SELECT dept_name, COUNT(student_id) AS student_number
FROM department LEFT JOIN student USING (dept_id)
GROUP BY dept_id
ORDER BY student_number DESC, dept_name;


24. Game Play Analysis IV - not too bad... medium hardish... (more medium than hard)

SELECT ROUND(SUM(CASE WHEN ABS(A1.event_date - A2.event_date) = 1 THEN 1 ELSE 0 END)/COUNT(DISTINCT A1.player_id), 2) AS fraction

FROM (SELECT player_id, MIN(event_date) AS event_date
      FROM Activity
      GROUP BY player_id) AS A1                         /*Have A1 contain only the MIN event_date per GROUPED player_id*/
JOIN Activity A2 USING (player_id);


25. New Users Daily Count - need to study it more REDO

/*DATEDIFF(date 1, date 2)*/

SELECT login_date, COUNT(user_id) AS user_count
FROM (SELECT user_id, MIN(activity_date) AS login_date        /*SELECT only the MIN activity date as login_date*/
      FROM Traffic
      WHERE activity = 'login'
      GROUP BY user_id) A
WHERE DATEDIFF ('2019-06-30', login_date) <= 90
GROUP BY login_date;
      

26. Unpopular Books - understand solution

/*TIMESTAMPDIFF */

SELECT DISTINCT book_id, name
FROM Books 
WHERE book_id NOT IN (SELECT book_id
                      FROM books
                      WHERE TIMESTAMPDIFF(month, available_from, '2019-06-23') <= 1)
AND book_id NOT IN (SELECT book_id
                    FROM Orders
                    WHERE dispatch_date >= '2018-06-23' AND dispatch_date < '2019-06-23'
                    GROUP BY Orders.book_id
                    HAVING SUM(quantity) >= 10); 


27. Rank Scores - very common - need to look and examine, not really querying question

SELECT Score, (SELECT COUNT(DISTINCT Score) 
               FROM Scores 
               WHERE Score >= s.Score) AS Rank
FROM Scores s
ORDER BY Score DESC;


28. Winning Candidate - understood it. got most of the code correctly on first try.

SELECT DISTINCT Name
FROM Candidate JOIN Vote ON Candidate.id = Vote.CandidateId
WHERE Candidate.id = (SELECT CandidateId
                           FROM Vote
                           GROUP BY CandidateId
                           ORDER BY COUNT(*) DESC
                           LIMIT 1);


29. Consecutive Numbers - quite common - need to study how to calculate consecutive

SELECT DISTINCT l1.Num AS ConsecutiveNums
FROM Logs l1, Logs l2, Logs l3
WHERE 
l1.Id = l2.Id - 1
AND l2.Id = l3.Id - 1
AND l1.Num = l2.Num
AND l2.Num = l3.Num;

30. Get Highest Answer Rate Question - understood answer 

SELECT question_id AS survey_log
FROM survey_log 
GROUP BY question_id
ORDER BY (COUNT(answer_id)/COUNT(IF(action = 'answer', 1, 0))) DESC
LIMIT 1;


31. Reported Posts II - need to figure out answer more in-depth. Understand the gist of it

SELECT ROUND(SUM(percent)/COUNT(DISTINCT action_date), 2) AS average_daily_percent
FROM (SELECT Actions.action_date, COUNT(DISTINCT Removals.post_id)/COUNT(DISTINCT Actions.post_id)*100 AS percent
      FROM Actions LEFT JOIN Removals USING (post_id)
      WHERE extra = 'spam'
      GROUP BY action_date) AS temp;


32. Department Highest Salary - very common

SELECT Department.name AS Department, Employee.name AS Employee, Salary
FROM Employee JOIN Department ON Employee.DepartmentId = Department.Id
WHERE (DepartmentId, Salary) IN (SELECT DepartmentId, MAX(salary)         /*need the combination of DepartmentId, Salary to check*/
                                 FROM Employee
                                 GROUP BY DepartmentId);


33. Nth Highest Salary - very, very common - need to study, probably not querying

/*CREATE FUNCTION*/

CREATE FUNCTION getNthHighestSalary (N INT) RETURNS INT
BEGIN
DECLARE M INT;
SET M = N - 1;
RETURN (SELECT DISTINCT Salary
        FROM Employee
        ORDER BY Salary DESC
        LIMIT M, 1);
END


34. Second Degree Follower - quite common - need to study, doesn't seem too bad

SELECT f1.follower, COUNT(DISTINCT f2.follower) AS num
FROM follow f1 JOIN follow f2 ON f1.follower = f2.followee
GROUP BY f1.follower
ORDER BY f1.follower;


1.??*Find the Start and End Number of Continuous Ranges new question - should be number 1 - need to figure out solution

SELECT l1.log_id AS START_ID, MIN(l2.log_id) AS END_ID
FROM (SELECT log_id 
      FROM Logs
      WHERE log_id - 1 NOT IN (SELECT log_id FROM Logs)) L1,
     (SELECT log_id FROM Logs
      WHERE log_id + 1 NOT IN (SELECT log_id FROM Logs)) L2
WHERE l1.log_id <= l2.log_id
GROUP BY l1.log_id;








