Difficulty: Medium
48 questions

midway point: 24th question: 1132 - Reported Posts II

Redo: 177, 184, 534, 550, 574, 1077, 1098 (a little bit difficult, need to look at the tables), 1107, 1126, 
Memorize: 177 (CREATE FUNCTION) -> CREATE, BEGIN, DECLARE, SET1, SET2, SET3,... RETURN

Notes:
-- writing pseudocode helps
-- 184. RANK() OVER(PARTITION BY 1ST ORDER BY 2ND) => 184. RANK() OVER(PARTITION BY DepartmentId ORDER BY Salary DESC) AS num
-- 184. have to RANK OVER(PARTITION BY DepartmentId), then DepartmentId next line -> otherwise error
-- 184. likely if you PARTITION BY DepartmentId, then DepartmentId must come AFTER
-- 534. SUM(games_played) OVER(PARTITION BY player_id ORDER BY event_date) AS games_played_so_far => SUM() OVER(PARTITION BY player_id ORDER BY event_date)
-> SUMS up game_played, segregated by player_id, segregated by the order of event_date
-- 570. To do COUNT(), you need GROUP BY. GROUP BY ManagerId, HAVING COUNT(ManagerId) >= 5 -> usually COUNT comes with GROUP BY
-- 574. Winning Candidate => If you want to COUNT, you need to GROUP BY usually
-- 574. RANK and COUNT does not seem to work well
-- 574. JOIN ON and JOIN WHERE combos are very similar. JOIN ON with LEFT JOIN will produce NULLs, JOIN WHERE combo with LEFT JOIN will not produce nulls.
-- 608. If subquery returns more than 1 line, you need IN (otherwise if it returns just 1 line, you can use = )
-- 614. WHERE and HAVING are very similar for a non-aggregate function. If you put before GROUP BY, use WHERE. If you put AFTER GROUP BY, use HAVING.
-- 1045. If you cannot segregate the product_key, use COUNT(DISTINCT product_key) to compare both tables
-- 1077. RANK() seems to have to be empty
-- 1077. Better to PARTITION BY if you know it works... if you GROUP BY you may lose the tie in the RANK()
-- 1421. => USING(column1, column2) => FROM Queries LEFT JOIN NPV USING(id, year);

A*177. Nth Highest Salary -> CREATE FUNCTION    -> easy
                             BEGIN
                                DECLARE
                                SET
                                SET
                                RETURN
                             END                  -> looks like SELECT DISTINCT Salary returns NULL
# Write your MySQL query statement below
CREATE FUNCTION getNthHighestSalary(n INT) RETURNS INT
BEGIN
  DECLARE offsetvariable INT;
  SET offsetvariable = n - 1;
  RETURN (SELECT DISTINCT Salary 
          FROM Employee
          ORDER BY Salary DESC
          LIMIT 1 OFFSET offsetvariable);
END
#algorithm: n as input = 2
#SELECT DISTINCT Salary
#FROM Employee
#ORDER BY Salary DESC
#LIMIT 1 OFFSET (how many?)
#->if we want to get 2nd highest salary, offset 1
#->if we want 3rd highest salary, offset 2
#->set offset variable to be (n - 1)

A, W*178. Rank Scores -> easy
# Write your MySQL query statement below
# DENSE_RANK window function for no gaps
SELECT score,
DENSE_RANK() OVER(ORDER BY Score DESC) AS 'Rank'
FROM Scores
ORDER BY score DESC;

A*180. Consecutive Numbers -> easy
/* Write your T-SQL query statement below */
-- Consecutive means ID of Num are next to each other.
-- Use 3 aliases for this table Logs and then check whether 3 consecutive numbers are all the same
-- Check Ids are consecutive
-- Check Num from all 3 Logs l1, l2, l3 are the same
SELECT DISTINCT l1.Num AS ConsecutiveNums
FROM Logs l1, Logs l2, Logs l3
WHERE l1.Id = l2.Id - 1 AND l2.Id = l3.Id - 1
AND l1.Num = l2.Num AND l2.Num = l3.num;

A*184. Department Highest Salary -> Window function -> a bit harder
=> have to RANK OVER(PARTITION BY DepartmentId), then DepartmentId next line -> otherwise error
=> likely if you PARTITION BY DepartmentId, then DepartmentId must come AFTER

-- Window function
# Write your MySQL query statement below
SELECT Department.Name AS Department, Esub.Name AS Employee, Esub.Salary
FROM
(SELECT Id, Name, Salary, DepartmentId,
RANK() OVER(PARTITION BY DepartmentId ORDER BY Salary DESC) AS r
FROM Employee) AS Esub
JOIN Department ON Esub.DepartmentId = Department.Id
WHERE Esub.r = 1

-- Non-Window function
# Write your MySQL query statement below
-- IN subquery
SELECT Department.name AS 'Department', Employee.name AS 'Employee', Salary
FROM Employee JOIN Department ON Employee.DepartmentId = Department.Id
WHERE (Employee.DepartmentId, Salary) IN 
(SELECT DepartmentId, MAX(Salary)
 FROM Employee 
 GROUP BY DepartmentId);

534. Game Play Analysis III - did not flash
#Window function answer
# Write your MySQL query statement below
SELECT player_id, event_date, SUM(games_played) OVER(PARTITION BY player_id ORDER BY event_date) AS games_played_so_far
FROM Activity
ORDER BY player_id, event_date ASC;

#Non-window function answer -> don't fully get...
# Write your MySQL query statement below
SELECT a1.player_id, a1.event_date, SUM(a2.games_played) AS games_played_so_far
FROM activity a1, activity a2
WHERE a1.player_id = a2.player_id
AND a1.event_date >= a2.event_date
GROUP BY a1.player_id, a1.event_date
ORDER BY a1.player_id, a1.event_date;

550. Game Play Analysis IV -> tougher
-- numerator: count # of players logged in for at least 2 consecutive days ,starting from their FIRST login date
-- denominator: total number of players

# Write your MySQL query statement below
SELECT ROUND(SUM(IF(DATEDIFF(event_date, first_login) = 1, 1, 0)) / COUNT(DISTINCT player_id),2) AS fraction
FROM (SELECT player_id, event_date, 
      MIN(event_date) OVER(PARTITION BY player_id) AS first_login
      FROM Activity) AS subquery

A*570. Managers with at Least 5 Direct Reports -> not too bad
# Write your MySQL query statement below
SELECT e2.Name
FROM Employee e1 JOIN Employee e2 ON e1.ManagerId = e2.Id
GROUP BY e1.ManagerId
HAVING COUNT(e1.ManagerId) >= 5 

574. Winning Candidate => If you want to COUNT, you need to GROUP BY usually
# Write your MySQL query statement below
SELECT Name
FROM Candidate JOIN (SELECT Candidateid
                     FROM Vote
                     GROUP BY CandidateId
                     ORDER BY COUNT(CandidateId) DESC
                     LIMIT 1) AS winner
WHERE Candidate.id = winner.Candidateid;

-- This works too => JOIN ON or JOIN WHERE is similar except, 
SELECT Name
FROM Candidate JOIN (SELECT Candidateid
                     FROM Vote
                     GROUP BY CandidateId
                     ORDER BY COUNT(CandidateId) DESC
                     LIMIT 1) AS winner ON winner.CandidateId = Candidate.id 

This answer didn't work -> RANK OVER(ORDER BY COUNT) gives every COUNT 1... doesn't work because when you GROUP BY, each COUNT gives only 1... have to GROUP BY candidateId
# Write your MySQL query statement below
SELECT DISTINCT Name
FROM (SELECT *,
      RANK() OVER(ORDER BY COUNT(CandidateId) DESC) AS count_rank
      FROM Vote JOIN Candidate USING (id)
      ) AS subquery
WHERE subquery.count_rank = 1;

-- winner is the most count in CandidateId from Vote table

-- This answer works
# Write your MySQL query statement below
SELECT Name
FROM Candidate
WHERE id =  (SELECT CandidateId
             FROM Vote
             GROUP BY CandidateId
             ORDER BY COUNT(CandidateId) DESC
             LIMIT 1);

578. Get Highest Answer Rate Question
# Write your MySQL query statement below
SELECT  question_id AS survey_log
FROM survey_log
GROUP BY question_id
ORDER BY IFNULL(COUNT(answer_id) / COUNT(IF(action = 'show', 1, 0)), 0) DESC
LIMIT 1;
-- ORDER BY: 1/1 for question 285, 0/1 for question 369

580. Count Student Number in Departments -> flashed 
# Write your MySQL query statement below
# print dept name and number of students majoring in each dep for all dep in dept table (even ones with no current students)
# sort by number of students DESC, sort by dep't alphabetically
SELECT dept_name, IFNULL(COUNT(student_id), 0) AS student_number
FROM department LEFT JOIN student USING (dept_id)
GROUP BY dept_id
ORDER BY student_number DESC, dept_name ASC;

585. Investments in 2016
# Write your MySQL query statement below
SELECT SUM(TIV_2016) AS TIV_2016
FROM insurance
WHERE TIV_2015 IN (SELECT TIV_2015
                   FROM insurance
                   GROUP BY TIV_2015
                   HAVING COUNT(TIV_2015) > 1)
                   AND CONCAT (LAT, LON) IN (SELECT CONCAT (LAT, LON)
                                             FROM insurance
                                             GROUP BY LAT, LON
                                             HAVING COUNT(*) = 1);
-- Filter CONCAT (LAT, LON) criteria 1st, then filter COUNT(TIV_2015) > 1 criteria 2nd, then SUM last once criteria 1 and 2 are filled.

602. Friend Requests II: Who Has the Most Friends -> use tbl, don't use table (reserved word)
# Write your MySQL query statement below
SELECT id, COUNT(id) AS num
FROM 
(
    SELECT requester_id AS id FROM request_accepted
    UNION ALL
    SELECT accepter_id AS id FROM request_accepted
) AS tbl
GROUP BY id
ORDER BY num DESC
LIMIT 1;
                                                                  
S*608. Tree Node -> kind of a weird question
# Write your MySQL query statement below
# Write your MySQL query statement below
# root - no parent node
# inner - parent node of some node, NOT NULL parent 
# leaf - rest of the cases

# Write your MySQL query statement below
SELECT id,
(CASE
    WHEN id = (SELECT id FROM tree WHERE p_id IS NULL) THEN 'Root'
    WHEN id IN (SELECT p_id FROM tree) THEN 'Inner'
    ELSE 'Leaf'
  END) AS Type
FROM tree
ORDER BY id;

612. Shortest Distance in a Plane 
# Write your MySQL query statement below
SELECT ROUND(SQRT(MIN((POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2)))), 2) AS shortest
FROM point_2d p1, point_2d p2 
WHERE p1.x != p2.x OR p1.y != p2.y

614. Second Degree Follower
# Write your MySQL query statement below
SELECT followee AS follower, COUNT(DISTINCT follower) AS num
FROM follow
WHERE followee IN (SELECT follower
                   FROM follow)
GROUP BY followee
ORDER BY followee;

# Write your MySQL query statement below
SELECT followee AS follower, COUNT(DISTINCT follower) AS num
FROM follow
GROUP BY followee
HAVING followee IN (SELECT follower
                    FROM follow)
ORDER BY followee;

A*626. Exchange Seats -> the CASE ordering has to be below probably because it depends if last id is odd...
=> CASE solution
# Write your MySQL query statement below
SELECT (CASE
            WHEN id % 2 != 0 AND id != last_id THEN id + 1
            WHEN id % 2 != 0 AND id = last_id THEN id
            ELSE id - 1
        END) AS id, student
FROM seat, (SELECT MAX(id) AS last_id
            FROM seat) AS subquery
ORDER BY id ASC;
#if id is odd, + 1 to even
#if id is even, -1 to odd
#if id = last id, leave

A*1045. Customers Who Bought All Products -> not too difficult, using the COUNT(DISTINCT product_key) to compare both tables
# Write your MySQL query statement below
SELECT customer_id
FROM Customer 
GROUP BY customer_id
HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) 
                                      FROM product);

A*1070. Product Sales Analysis III (Amazon tag) -> quite easy -> answer makes sense
# Write your MySQL query statement below
SELECT product_id, year AS first_year, quantity, price
FROM Sales
WHERE (product_id, year) IN (SELECT product_id, MIN(year)
                             FROM Sales
                             GROUP BY product_id);

A*1098. Unpopular Books
# Write your MySQL query statement below
SELECT Books.book_id, name
FROM Books LEFT JOIN Orders ON Books.book_id = Orders.book_id AND dispatch_date BETWEEN '2018-06-23' AND '2019-06-23'
WHERE DATEDIFF('2019-06-23', available_from) > 30
GROUP BY Books.book_id
HAVING IFNULL(SUM(quantity), 0) < 10;

1107. New Users Daily Count
# Write your MySQL query statement below
SELECT login_date, COUNT(DISTINCT user_id) AS user_count
FROM (SELECT MIN(activity_date) AS login_date, user_id
      FROM Traffic
      WHERE activity = 'login'
      group by user_id) AS subquery
WHERE DATEDIFF ('2019-06-30', login_date) <= 90
GROUP BY login_date;

1112. Highest Grade For Each Student -> Can use ROW_NUMBER() as well
# Write your MySQL query statement below
SELECT student_id, course_id, grade
FROM (SELECT student_id, course_id, grade, 
      RANK() OVER(PARTITION BY student_id ORDER BY grade DESC, course_id) AS ranking
      FROM enrollments
     ) AS subquery
WHERE subquery.ranking = 1
ORDER BY student_id;

1126. Active Businesses -> MORE THAN ONE event type
# Write your MySQL query statement below
WITH CTE AS
(
    SELECT business_id,
    (
        CASE
            WHEN occurences > AVG(occurences) OVER(PARTITION BY event_type) THEN 1
            ELSE 0
        END
    ) AS count
    FROM Events
)
SELECT business_id
FROM CTE
GROUP BY business_id
HAVING SUM(count) > 1
-- AVG:
-- numerator: SUM() -> SUM(occurrences) as indicated by AVG
-- denominator: COUNT() -> PARTITION BY event_type so COUNT(event_type)
-- active is when occurrences > greater than avg occurrences for that event type

S*1132. Reported Posts II
# Write your MySQL query statement below
# find the average for daily percentage of posts that got removed after being reported as spam, rounded to 2 decimal places
SELECT ROUND(SUM(percent) / COUNT(DISTINCT action_date), 2) AS average_daily_percent
FROM (SELECT action_date, COUNT(DISTINCT Removals.post_id) / COUNT(DISTINCT Actions.post_id) * 100 AS percent
      FROM Actions LEFT JOIN Removals USING (post_id)
      WHERE extra = 'spam'
      GROUP BY action_date) AS subquery;
-- SELECT 150 / 2 = 75.00
-- subquery: 3 / 2 = 1.5 => 1.5 * 100 = 150

1158. Market Analysis I
# Write your MySQL query statement below
SELECT user_id AS buyer_id, join_date, IFNULL(COUNT(order_date), 0) AS orders_in_2019 
FROM Users LEFT JOIN Orders ON Users.user_id = Orders.buyer_id AND YEAR(order_date) = '2019'
GROUP BY user_id;

1164. Product Price at a Given Date
# Write your MySQL query statement below
SELECT product_id, price
FROM (SELECT product_id, new_price AS price,
      RANK() OVER(PARTITION BY product_id ORDER BY change_date DESC) AS r
      FROM Products
      WHERE change_date <= '2019-08-16'
      ) AS subquery
WHERE subquery.r = 1

UNION ALL

SELECT product_id, 10 AS price
FROM Products
GROUP BY product_id
HAVING MIN(change_date) > '2019-08-16';

1174. Immediate Food Delivery II
# Write your MySQL query statement below
SELECT ROUND(AVG(order_date = customer_pref_delivery_date) * 100, 2) AS immediate_percentage
FROM Delivery
WHERE (customer_id, order_date) IN (SELECT customer_id, MIN(order_date)
                                    FROM Delivery
                                    GROUP BY customer_id);

1193. Monthly Transactions I
# Write your MySQL query statement below
SELECT SUBSTR(trans_date, 1, 7) AS month,
country,
COUNT(id) AS trans_count,
SUM(state = 'approved') AS approved_count,
SUM(amount) AS trans_total_amount,
SUM(IF(state = 'approved', amount, 0)) AS approved_total_amount
FROM Transactions
GROUP BY month, country

1204. Last Person to Fit in the Elevator
# Write your MySQL query statement below
WITH CTE AS
(
    SELECT *,
    SUM(weight) OVER(ORDER BY turn) AS total_weight
    FROM queue
)

SELECT person_name
FROM CTE
WHERE total_weight <= 1000
ORDER BY turn DESC
LIMIT 1;

S*1212. Team Scores in Football Tournament (no Amazon tag) -> Answer makes sense -> not too hard
# Write your MySQL query statement below
SELECT team_id, team_name,
SUM(CASE WHEN team_id = host_team AND host_goals > guest_goals THEN 3 ELSE 0 END) +
SUM(CASE WHEN team_id = guest_team AND guest_goals > host_goals THEN 3 ELSE 0 END) +
SUM(CASE WHEN team_id = host_team AND host_goals = guest_goals THEN 1 ELSE 0 END) +
SUM(CASE WHEN team_id = guest_team AND guest_goals = host_goals THEN 1 ELSE 0 END) AS num_points
FROM Teams LEFT JOIN Matches ON team_id = host_team OR team_id = guest_team
GROUP BY team_id
ORDER BY num_points DESC, team_id ASC;

S*1270. All People Report to the Given Manager (no Amazon tag) -> Answer kind of makes sense I guess
=> JOIN all 3 table, get e1.employee_id. WHERE e3.manager_id = 1 and e1.employee_id != 1
# Write your MySQL query statement below
# Write an SQL query to find employee_id of all employees that directly or indirectly report their work to the head of the company.
SELECT e1.employee_id
FROM Employees e1 JOIN Employees e2 ON e1.manager_id = e2.employee_id JOIN Employees e3 ON e2.manager_id = e3.employee_id
WHERE e3.manager_id = 1 AND e1.employee_id != 1

S*1341. Moving Rating (no Amazon tag) -> does not seem too bad, answer makes sense
# Write your MySQL query statement below
# find name of user who has greated most number of movies (if tie, return lexicographically smaller user name)
# find movie name with highest average rating in Feb 2020 (if tie, return lexicographically smaller movie name)
(SELECT name AS results 
 FROM Users JOIN Movie_Rating USING(user_id)
 GROUP BY user_id
 ORDER BY COUNT(DISTINCT movie_id) DESC, name ASC 
 LIMIT 1)

UNION

(SELECT title
 FROM Movies JOIN Movie_Rating USING(movie_id)
 WHERE created_at BETWEEN '2020-02-01' AND '2020-02-29'
 GROUP BY movie_id
 ORDER BY AVG(rating) DESC, title ASC
 LIMIT 1)

A*1421. NPV Queries (Amazon tag) -> seems easy
# Write your MySQL query statement below
SELECT id, year, IFNULL(npv, 0) AS npv
FROM Queries LEFT JOIN NPV USING (id, year)
ORDER BY id ASC;
 
 
