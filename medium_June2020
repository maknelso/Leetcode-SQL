Difficulty: Medium
48 questions

Do: 14 medium questions (29%)

Notes:
-- RANK() OVER(PARTITION BY 1ST ORDER BY 2ND) => 184. RANK() OVER(PARTITION BY DepartmentId ORDER BY Salary DESC) AS num


Amazon tag medium - 9:

A*177. Nth Highest Salary -> Looks like you have to memorize this one
# Write your MySQL query statement below
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  DECLARE M INT;
  SET M = N - 1;
  RETURN (SELECT DISTINCT Salary 
          FROM Employee
          ORDER BY Salary DESC
          LIMIT 1 OFFSET M);
END

A, W*178. Rank Scores (Amazon tag) -> sometimes have to use MS SQL Server
/* Write your T-SQL query statement below */
SELECT score,
DENSE_RANK() OVER(ORDER BY Score DESC) AS Rank
FROM Scores
ORDER BY score DESC, Rank ASC;

A*180. Consecutive Numbers (Amazon tag) -> does not seem that bad
/* Write your T-SQL query statement below */
-- Consecutive means ID of Num are next to each other.
-- Use 3 aliases for this table Logs and then check whether 3 consecutive numbers are all the same
-- Check Ids are consecutive
-- Check Num from all 3 Logs l1, l2, l3 are the same
SELECT DISTINCT l1.Num AS ConsecutiveNums
FROM Logs l1, Logs l2, Logs l3
WHERE l1.Id = l2.Id - 1 AND l2.Id = l3.Id - 1
AND l1.Num = l2.Num AND l2.Num = l3.num;

A*184. Department Highest Salary (Amazon tag) -> not too bad, I like the Window function.
=> have to RANK OVER(PARTITION BY DepartmentId), then DepartmentId next line -> otherwise error

-- Window function
# Write your MySQL query statement below
SELECT Department.Name AS Department, Esub.Name As Employee, Esub.Salary
FROM (SELECT Name, Salary,
      RANK() OVER(PARTITION BY DepartmentId ORDER BY Salary DESC) AS r,
      DepartmentId
      FROM Employee) AS Esub
JOIN Department ON Esub.DepartmentId = Department.Id
WHERE Esub.r = 1;

-- Non-Window function
# Write your MySQL query statement below
-- IN subquery
SELECT Department.name AS 'Department', Employee.name AS 'Employee', Salary
FROM Employee JOIN Department ON Employee.DepartmentId = Department.Id
WHERE (Employee.DepartmentId, Salary) IN 
(SELECT DepartmentId, MAX(Salary)
 FROM Employee 
 GROUP BY DepartmentId);


A*570. Managers with at Least 5 Direct Reports (Amazon tag) -> not too bad
# Write your MySQL query statement below
SELECT Name 
FROM Employee e1 JOIN (SELECT ManagerId
                       FROM Employee
                       GROUP BY ManagerId
                       HAVING COUNT(ManagerId) >= 5) AS e2
                  ON e1.Id = e2.ManagerId;

A*626. Exchange Seats (Amazon tag) -> need to redo
=> COALESCE(expression) - Evaluates the arguments in order and returns the first expression that doesn't evaluate to NULL
=> COALESCE is for seat 5 -> seat 5 does not exchange
=> bit manipulation expression (id+1)^1-1
# Write your MySQL query statement below
SELECT
    s1.id, COALESCE(s2.student, s1.student) AS student
FROM
    seat s1
        LEFT JOIN
    seat s2 ON ((s1.id + 1) ^ 1) - 1 = s2.id
ORDER BY s1.id;

=> CASE solution
SELECT
    (CASE
        WHEN MOD(id, 2) != 0 AND counts != id THEN id + 1
        WHEN MOD(id, 2) != 0 AND counts = id THEN id
        ELSE id - 1
    END) AS id,
    student
FROM
    seat,
    (SELECT
        COUNT(*) AS counts
    FROM
        seat) AS seat_counts
ORDER BY id ASC;

A*1045. Customers Who Bought All Products (Amazon tag) -> not too difficult, using the COUNT(DISTINCT product_key) to compare both tables
# Write your MySQL query statement below
SELECT customer_id
FROM Customer 
GROUP BY customer_id
HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) 
                                      FROM product);

A*1070. Product Sales Analysis III (Amazon tag) -> quite easy -> answer makes sense
# Write your MySQL query statement below
SELECT product_id, year AS first_year, quantity, price
FROM Sales
WHERE (product_id, year) IN (SELECT product_id, MIN(year) AS year
                             FROM Sales
                             GROUP BY product_id);

S, A*1421. NPV Queries (Amazon tag) -> does not seem too bad
# Write your MySQL query statement below
SELECT t1.id, t1.year, IFNULL(npv, 0) AS npv
FROM queries AS t1 LEFT JOIN NPV AS t2
ON t1.id = t2.id AND t1.year = t2.year;


Other common medium - 5:

S*608. Tree Node (no Amazon tag)
# Write your MySQL query statement below
SELECT id, IF(ISNULL(p_id), 'Root',
IF(id IN (SELECT p_id FROM tree), 'Inner','Leaf')) AS Type
FROM Tree
ORDER BY id;

S*1132. Reported Posts II (no Amazon tag)

S*1212. Team Scores in Football Tournament (no Amazon tag)
# Write your MySQL query statement below
SELECT team_id, team_name,
SUM(CASE WHEN team_id=host_team AND host_goals>guest_goals THEN 3 ELSE 0 END)+
SUM(CASE WHEN team_id=guest_team AND guest_goals>host_goals THEN 3 ELSE 0 END)+
SUM(CASE WHEN team_id=host_team AND host_goals=guest_goals THEN 1 ELSE 0 END)+
SUM(CASE WHEN team_id=guest_team AND guest_goals=host_goals THEN 1 ELSE 0 END)
AS num_points
FROM Teams LEFT JOIN Matches ON team_id = host_team OR team_id = guest_team
GROUP BY team_id
ORDER BY num_points DESC, team_id;

S*1270. All People Report to the Given Manager (no Amazon tag)
# Write your MySQL query statement below
SELECT e1.employee_id
FROM Employees e1
JOIN Employees e2
ON e1.manager_id = e2.employee_id
JOIN Employees e3
ON e2.manager_id = e3.employee_id
WHERE e3.manager_id = 1 AND e1.employee_id != 1

S*1341. Moving Rating (no Amazon tag)
# Write your MySQL query statement below
-- 1st part, we calculate the name of the user who has rated the greatest number of movies. So, simply join users and movie_rating tables and group by user_id and sort the results by highest count first and limit the result to 1
-- 2nd part, we calculate the name of the movie with highest avg rating. Same as the first step, also include dates (i.e. feb) and sort the results by highest avg rating and take only first result

(select name as results from users u join movie_rating m
on u.user_id = m.user_id
group by u.user_id
order by count(distinct movie_id) desc, name limit 1)
Union
(select title from movies a join movie_rating b
on a.movie_id = b.movie_id
where created_at between '2020-02-01' and '2020-02-29'
group by a.movie_id
order by avg(rating) desc, title limit 1)


Amazon tag hard - 5:
185. Department Top Three Salaries
262. Trips and Users
579. Find Cumulative Salary of an Employee
601. Human Traffic of Stadium
618. Students Report by Geography
