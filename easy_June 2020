Difficulty: Easy (do all high frequencies, and CASE, SET, UPDATE, INSERT ones)

- see which ones can use Window function to apply

48 questions so far => half way point is 1069 - Product Sales Analysis II

#   Title
175 - Combine Two Tables
# Write your MySQL query statement below
SELECT FirstName, LastName, City, State
FROM Person LEFT JOIN Address USING (PersonId);

*176 - Second Highest Salary - DID NOT FLASH
# Write your MySQL query statement below
SELECT MAX(Salary) AS SecondHighestSalary
FROM Employee
WHERE Salary < (SELECT MAX(Salary) FROM Employee);

*181 - Employees Earning More Than Their Managers - DID NOT FLASH (have to draw it out on pen and paper)
# Write your MySQL query statement below
SELECT e1.Name AS Employee
FROM Employee e1 JOIN Employee e2 ON e1.ManagerId = e2.Id
WHERE e1.salary > e2.salary;

182. Duplicate Emails - FLASHED (need GROUP BY before HAVING)
# Write your MySQL query statement below
SELECT Email
FROM Person
GROUP BY Email
HAVING COUNT(Email) > 1;

183. Customer Who Never Order
# Write your MySQL query statement below
SELECT Name AS Customers
FROM Customers
WHERE Customers.Id NOT IN (SELECT CustomerId FROM Orders);

*196. Delete Duplicate Emails - DID NOT FLASH (need a self-join for this question: FROM table1 T1, table1 T2)
# Write your MySQL query statement below
DELETE p1.*
FROM Person p1, Person p2
WHERE p1.Email = p2.Email AND p1.Id > p2.Id;

*197. Rising Temperature - DID NOT FLASH (DATEDIFF function) - DATE DIFF
# Write your MySQL query statement below
SELECT w1.Id AS Id
FROM Weather w1 JOIN Weather w2
WHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.RecordDate, w2.RecordDate) = 1;

511. Game Play Analysis I
# Write your MySQL query statement below
SELECT player_id, MIN(event_date) AS first_login
FROM Activity
GROUP BY player_id;

*512. Game Play Analysis II - DID NOT FLASH => Think about what you need/ what you are getting from your subquery first
# Write your MySQL query statement below
SELECT player_id, device_id
FROM Activity
WHERE (player_id, event_date) IN (SELECT player_id, MIN(event_date) FROM Activity GROUP BY player_id);

*577. Employee Bonus - HALF FLASHED => You need LEFT JOIN to generate the NULLs, otherwise JOIN will not produce NULL
# Write your MySQL query statement below
SELECT name, bonus
FROM Employee LEFT JOIN Bonus USING(empId)
WHERE bonus < 1000 OR bonus IS NULL;

584. Find Customer Referee
# Write your MySQL query statement below
SELECT name
FROM customer 
WHERE referee_id != 2 OR referee_id IS NULL;

*586. Customer Placing the Largest Number of Orders - DID NOT FLASH => IMPORTANT*: Have to aggregate (via GROUP BY) data first,
then ORDER BY COUNT(*) 
# Write your MySQL query statement below
SELECT customer_number
FROM orders
GROUP BY customer_number
ORDER BY COUNT(customer_number) DESC
LIMIT 1;

595. Big Countries
# Write your MySQL query statement below
SELECT name, population, area
FROM World 
WHERE area > 3000000 OR population > 25000000;

*596. Classes More Than 5 Students => DID NOT FLASH => HAVING condition (HAVING is for WHERE but for aggregates)
# Write your MySQL query statement below
SELECT class
FROM courses
GROUP BY class
HAVING COUNT(DISTINCT student) >= 5;

S*597. Friend Requests I: Overall Acceptance Rate (skipped)

**603. Consecutive Available Seats (skipped) - Window function
# Write your MySQL query statement below
SELECT seat_id
FROM (SELECT seat_id, free,
     LAG(free,1) OVER (ORDER BY seat_id) as free_lag,
     LEAD(free,1) OVER (ORDER BY seat_id) as free_lead
     FROM cinema ) as t
WHERE (free = 1 AND free_lag = 1)
OR (free = 1 AND free_lead = 1)
ORDER BY seat_id ASC;

S*607. Sales Person -> feeling tired, did not get

S*610. Triangle Judgment -> feeling tired, skipped
# Write your MySQL query statement below
SELECT *, 
IF(x + y > z AND x + z > y AND y + z > x, 'Yes', 'No') AS whatever
FROM triangle;

*613. Shortest Distance in a Line -> DID NOT FLASH
# Write your MySQL query statement below
SELECT MIN(ABS(p1.x - p2.x)) AS shortest
FROM point p1 join point p2
WHERE p1.x != p2.x;

*619. Biggest Single Number => DID NOT FLASH. Use subquery to get unique num, then MAX the num from it.
# Write your MySQL query statement below
SELECT MAX(subquery.num) AS num
FROM
(SELECT num
 FROM my_numbers
 GROUP BY num
 HAVING COUNT(num) = 1
) AS subquery;

620. Not Boring Movies => modulo is fine, != to replace <> is fine
# Write your MySQL query statement below
SELECT id, movie, description, rating
FROM cinema
WHERE id%2 != 0 AND description !='boring'
ORDER BY rating DESC;

*627. Swap Salary -> tired skipped -> remember - UPDATE clause
# Write your MySQL query statement below
UPDATE salary 
SET sex = IF(sex = "m", "f", "m");

*1050. Actors and Directors Who Cooperated At Least Three Times => what does GROUP BY actor_id, director_id do? Do not need parenthesis!
# Write your MySQL query statement below
SELECT actor_id, director_id
FROM ActorDirector
GROUP BY actor_id, director_id
HAVING COUNT(actor_id) >= 3;

=> Group By X means put all those with the same value for X in the one group.
   Group By X, Y means put all those with the same values for both X and Y in the one group.
   
1068. Product Sales Analysis I => seems a bit too easy.... JOIN = INNER JOIN (returns records that have matching values in BOTH tables)
# Write your MySQL query statement below
SELECT product_name, year, price
FROM Sales JOIN Product USING (product_id);

1069. Product Sales Analysis II 
# Write your MySQL query statement below
-- Reports total quantity sold for every product id
SELECT product_id, SUM(quantity) AS total_quantity
FROM Sales JOIN Product USING (product_id)
GROUP BY product_id;

1075. Project Employees I 
# Write your MySQL query statement below
SELECT project_id, ROUND(AVG(experience_years), 2) AS average_years
FROM Project JOIN Employee USING (employee_id)
GROUP BY project_id;

**1076. Project Employees II => DID NOT FLASH - WINDOW FUNCTION => need to review carefully
=> trick: ORDER BY COUNT(DISTINCT employee_id) 
# Write your MySQL query statement below
#report all projects with most employees
SELECT project_id
FROM (SELECT project_id, 
      RANK() OVER(ORDER BY COUNT(DISTINCT employee_id)DESC) AS ranks
      FROM Project
      GROUP BY project_id) AS subquery
WHERE ranks = 1;

**1082. Sales Analysis I => half-flashed 
# Write your MySQL query statement below
# Can probably use a window function here
SELECT seller_id
FROM (SELECT *,
      DENSE_RANK()OVER(ORDER BY SUM(price) DESC) AS r
      FROM Sales
      GROUP BY seller_id) AS subquery
WHERE r = 1;

**1083. Sales Analysis II => DID NOT FLASH -> did not fully understand redo
# Write your MySQL query statement below
SELECT DISTINCT buyer_id
FROM Sales JOIN Product USING(product_id)
WHERE product_name = 'S8'
AND buyer_id NOT IN(SELECT buyer_id
                    FROM Sales JOIN Product USING(product_id)
                    WHERE product_name = 'iPhone');

*1084. Sales Analysis III - don't really understand question.... my answer should be correct
# Write your MySQL query statement below
# report products sold between 2019-01-01 and 2019-03-31 inclusive
select product_id, product_name
from product
where product_id not in
(select product_id
from sales
where sale_date <'2019-01-01'or sale_date>'2019-03-31')

*1113. Reported Posts => DID NOT FLASH => DISTINCT does not need ()
# Write your MySQL query statement below
SELECT extra AS report_reason, COUNT(DISTINCT post_id) AS report_count
FROM Actions
WHERE action_date = '2019-07-04' AND action = 'report'
GROUP BY extra;

*1141. User Activity for the Past 30 Days I => DID NOT FLASH: Use DATEDIFF
# Write your MySQL query statement below
SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users
FROM Activity
WHERE DATEDIFF('2019-07-27', activity_date) < 30
GROUP BY activity_date;

S*1142. User Activity for the Past 30 Days II => SKIPPED
# Write your MySQL query statement below
SELECT IFNULL(ROUND(AVG(num),2),0.00) AS average_sessions_per_user    
FROM(SELECT COUNT(DISTINCT session_id) AS num
     FROM Activity
     WHERE DATEDIFF('2019-07-27', activity_date) < 30               
     GROUP BY user_id) AS c;     

1148. Article Views I
# Write your MySQL query statement below
# Find all authors that viewed at least one of their own articles
# Sort in ASC order by their id
SELECT author_id AS id
FROM Views
WHERE author_id = viewer_id
GROUP BY author_id 
ORDER BY author_id ASC;

1173. Immediate Food Delivery I => half flashed => To find percentage just use AVG(order_date = customer_pref_delivery_date)
# Write your MySQL query statement below
SELECT ROUND(AVG(order_date = customer_pref_delivery_date)*100 ,2) AS immediate_percentage
FROM Delivery;

S**1179. Reformat Department Table => IMPORTANT, and I skipped
SELECT id,
SUM(CASE WHEN month = 'Jan' THEN revenue END) AS Jan_Revenue,
SUM(CASE WHEN month = 'Feb' THEN revenue END) AS Feb_Revenue,
SUM(CASE WHEN month = 'Mar' THEN revenue END) AS Mar_Revenue,
SUM(CASE WHEN month = 'Apr' THEN revenue END) AS Apr_Revenue,
SUM(CASE WHEN month = 'May' THEN revenue END) AS May_Revenue,
SUM(CASE WHEN month = 'Jun' THEN revenue END) AS Jun_Revenue,
SUM(CASE WHEN month = 'Jul' THEN revenue END) AS Jul_Revenue,
SUM(CASE WHEN month = 'Aug' THEN revenue END) AS Aug_Revenue,
SUM(CASE WHEN month = 'Sep' THEN revenue END) AS Sep_Revenue,
SUM(CASE WHEN month = 'Oct' THEN revenue END) AS Oct_Revenue,
SUM(CASE WHEN month = 'Nov' THEN revenue END) AS Nov_Revenue,
SUM(CASE WHEN month = 'Dec' THEN revenue END) AS Dec_Revenue
FROM Department
GROUP BY id;

S*1211. Queries Quality and Percentage
# Write your MySQL query statement below
# query to find query_name, quality, and poor_query_percentage
SELECT query_name, ROUND(AVG(rating/position), 2) AS quality, ROUND(AVG(rating < 3) * 100, 2) AS poor_query_percentage
FROM Queries
GROUP BY query_name
ORDER BY quality DESC;

S*1241. Number of Comments per Post => Do not fully understand - need to take a look again
# Write your MySQL query statement below
SELECT S1.sub_id AS post_id, COUNT(DISTINCT S2.sub_id) AS number_of_comments
FROM Submissions S1 LEFT JOIN Submissions S2 ON S1.sub_id = S2.parent_id    
WHERE S1.parent_id IS NULL   
GROUP BY S1.sub_id;

**1251. Average Selling Price => Need WHERE purchase_date BETWEEN start_date AND end_date to make sure the correct SUM(units * price)
pairing is used!!
# Write your MySQL query statement below
SELECT product_id, ROUND(SUM(units * price) / SUM(units) , 2) AS average_price
FROM Prices JOIN UnitsSold USING (product_id)
WHERE purchase_date BETWEEN start_date AND end_date
GROUP BY Prices.product_id
ORDER BY Prices.product_id;

*1280. Students and Examinatinos
# Write your MySQL query statement below
SELECT student.student_id, student.student_name, subject.subject_name, COUNT(exam.subject_name) AS attended_exams
FROM Students as student JOIN Subjects as subject LEFT JOIN Examinations as exam
ON student.student_id = exam.student_id AND subject.subject_name = exam.subject_name
GROUP BY student.student_id, subject.subject_name
ORDER BY student_id, subject_name;

S*1294. Weather Type in Each Country => SKIP

**1303. Find the Team Size => DID NOT FLASH => Window Function
# Write your MySQL query statement below
SELECT employee_id, COUNT(*) OVER (PARTITION BY team_id) AS team_size
FROM Employee;

S*1322. Ads Performance => SKIP

**1327. List the Products Ordered in a Period => WHERE, then GROUP BY, then HAVING. Cannot have two conditions for HAVING
# Write your MySQL query statement below
SELECT product_name, SUM(unit) AS unit
FROM Products JOIN Orders USING (product_id)
WHERE order_date BETWEEN '2020-02-01' AND '2020-02-29'
GROUP BY product_id
HAVING SUM(unit) >= 100;

**1350. Students with Invalid Departments
# Write your MySQL query statement below
SELECT id, name
FROM Students
WHERE department_id NOT IN (SELECT id FROM Departments);

1378. Replace Employee ID with The Unique Identifier
# Write your MySQL query statement below
SELECT unique_id, name
FROM EmployeeUNI RIGHT JOIN Employees USING (id);

**1407. Top Travellers => LEFT JOIN to get NULL, IFNULL( , 0)
# Write your MySQL query statement below
SELECT name, IFNULL(SUM(distance), 0) AS travelled_distance
FROM Users LEFT JOIN Rides ON Users.id = Rides.user_id
GROUP BY user_id
ORDER BY travelled_distance DESC, name ASC;

**1435. Create a Session Bar Chart => skip, not sure how to do
# Write your MySQL query statement below
With tiers (MIN, MAX, bin) AS
(
    SELECT 0, 299, '[0-5>'
    UNION ALL
    SELECT 300, 599, '[5-10>'
    UNION
    SELECT 600, 899, '[10-15>'
    UNION ALL
    SELECT 900, 100000, '15 or more'
)
SELECT tiers.bin, COUNT(session_id) AS total 
FROM tiers LEFT JOIN Sessions on duration BETWEEN MIN AND MAX
GROUP BY bin;

**1484. Groups Sold Products By The Date => trick: GROUP_CONCAT(product ORDER BY product ASC SEPARATOR ',')
# Write your MySQL query statement below
SELECT sell_date, COUNT(DISTINCT product) AS num_sold, 
GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR ',') AS products
FROM Activities
GROUP BY sell_date;
