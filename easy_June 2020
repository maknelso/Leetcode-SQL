Difficulty: Easy (do all high frequencies, and CASE, SET, UPDATE, INSERT ones)

- see which ones can use Window function to apply

48 questions so far => half way point is 1069 - Product Sales Analysis II

#   Title
175 - Combine Two Tables

# Write your MySQL query statement below
SELECT FirstName, LastName, City, State
FROM Person LEFT JOIN Address USING (PersonId);

*176 - Second Highest Salary - DID NOT FLASH

# Write your MySQL query statement below
SELECT MAX(Salary) AS SecondHighestSalary
FROM Employee
WHERE Salary < (SELECT MAX(Salary) FROM Employee);

*181 - Employees Earning More Than Their Managers - DID NOT FLASH (have to draw it out on pen and paper)

# Write your MySQL query statement below
SELECT e1.Name AS Employee
FROM Employee e1 JOIN Employee e2 ON e1.ManagerId = e2.Id
WHERE e1.salary > e2.salary;

182. Duplicate Emails - FLASHED (need GROUP BY before HAVING)
# Write your MySQL query statement below
SELECT Email
FROM Person
GROUP BY Email
HAVING COUNT(Email) > 1;

183. Customer Who Never Order
# Write your MySQL query statement below
SELECT Name AS Customers
FROM Customers
WHERE Customers.Id NOT IN (SELECT CustomerId FROM Orders);

*196. Delete Duplicate Emails - DID NOT FLASH (need a self-join for this question: FROM table1 T1, table1 T2)
# Write your MySQL query statement below
DELETE p1.*
FROM Person p1, Person p2
WHERE p1.Email = p2.Email AND p1.Id > p2.Id;

*197. Rising Temperature - DID NOT FLASH (DATEDIFF function) - DATE DIFF
# Write your MySQL query statement below
SELECT w1.Id AS Id
FROM Weather w1 JOIN Weather w2
WHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.RecordDate, w2.RecordDate) = 1;

511. Game Play Analysis I
# Write your MySQL query statement below
SELECT player_id, MIN(event_date) AS first_login
FROM Activity
GROUP BY player_id;

*512. Game Play Analysis II - DID NOT FLASH => Think about what you need/ what you are getting from your subquery first
# Write your MySQL query statement below
SELECT player_id, device_id
FROM Activity
WHERE (player_id, event_date) IN (SELECT player_id, MIN(event_date) FROM Activity GROUP BY player_id);

*577. Employee Bonus - HALF FLASHED => You need LEFT JOIN to generate the NULLs, otherwise JOIN will not produce NULL
# Write your MySQL query statement below
SELECT name, bonus
FROM Employee LEFT JOIN Bonus USING(empId)
WHERE bonus < 1000 OR bonus IS NULL;

584. Find Customer Referee
# Write your MySQL query statement below
SELECT name
FROM customer 
WHERE referee_id != 2 OR referee_id IS NULL;

*586. Customer Placing the Largest Number of Orders - DID NOT FLASH => IMPORTANT*: Have to aggregate (via GROUP BY) data first,
then ORDER BY COUNT(*) 
# Write your MySQL query statement below
SELECT customer_number
FROM orders
GROUP BY customer_number
ORDER BY COUNT(customer_number) DESC
LIMIT 1;

595. Big Countries
# Write your MySQL query statement below
SELECT name, population, area
FROM World 
WHERE area > 3000000 OR population > 25000000;

*596. Classes More Than 5 Students => DID NOT FLASH => HAVING condition (HAVING is for WHERE but for aggregates)
# Write your MySQL query statement below
SELECT class
FROM courses
GROUP BY class
HAVING COUNT(DISTINCT student) >= 5;

**597. Friend Requests I: Overall Acceptance Rate (skipped)

**603. Consecutive Available Seats (skipped) - Window function
# Write your MySQL query statement below
SELECT seat_id
FROM (SELECT seat_id, free,
     LAG(free,1) OVER (ORDER BY seat_id) as free_lag,
     LEAD(free,1) OVER (ORDER BY seat_id) as free_lead
     FROM cinema ) as t
WHERE (free = 1 AND free_lag = 1)
OR (free = 1 AND free_lead = 1)
ORDER BY seat_id ASC;

*607. Sales Person -> feeling tired, did not get

*610. Triangle Judgment -> feeling tired, skipped
# Write your MySQL query statement below
SELECT *, 
IF(x + y > z AND x + z > y AND y + z > x, 'Yes', 'No') AS whatever
FROM triangle;

*613. Shortest Distance in a Line -> DID NOT FLASH
# Write your MySQL query statement below
SELECT MIN(ABS(p1.x - p2.x)) AS shortest
FROM point p1 join point p2
WHERE p1.x != p2.x;

*619. Biggest Single Number => DID NOT FLASH. Use subquery to get unique num, then MAX the num from it.
# Write your MySQL query statement below
SELECT MAX(subquery.num) AS num
FROM
(SELECT num
 FROM my_numbers
 GROUP BY num
 HAVING COUNT(num) = 1
) AS subquery;

620. Not Boring Movies => modulo is fine, != to replace <> is fine
# Write your MySQL query statement below
SELECT id, movie, description, rating
FROM cinema
WHERE id%2 != 0 AND description !='boring'
ORDER BY rating DESC;

*627. Swap Salary -> tired skipped -> remember - UPDATE clause
# Write your MySQL query statement below
UPDATE salary 
SET sex = IF(sex = "m", "f", "m");

*1050. Actors and Directors Who Cooperated At Least Three Times => what does GROUP BY actor_id, director_id do? Do not need parenthesis!
# Write your MySQL query statement below
SELECT actor_id, director_id
FROM ActorDirector
GROUP BY actor_id, director_id
HAVING COUNT(actor_id) >= 3;

=> Group By X means put all those with the same value for X in the one group.
   Group By X, Y means put all those with the same values for both X and Y in the one group.
   
1068. Product Sales Analysis I => seems a bit too easy.... JOIN = INNER JOIN (returns records that have matching values in BOTH tables)
# Write your MySQL query statement below
SELECT product_name, year, price
FROM Sales JOIN Product USING (product_id);

1069. Product Sales Analysis II 
# Write your MySQL query statement below
-- Reports total quantity sold for every product id
SELECT product_id, SUM(quantity) AS total_quantity
FROM Sales JOIN Product USING (product_id)
GROUP BY product_id;










