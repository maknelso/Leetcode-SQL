EASY ONLY - All Database

Summary of EASY SQL insights:

- A good method to calculate MAX is to ORDER BY DESC and LIMIT 1
- To get the distances of each two points, we need to join this table with itself and use ABS() function.
- AVG(order_date = customer_pref_delivery_date) - average on condition (average only if condition inside bracket is true)



new questions:

1350. Students With Invalid Departments

SELECT id, name
FROM Students
WHERE Students.department_id NOT IN (SELECT id FROM Departments);

1303. Find the Team Size

SELECT employee_id, team_size
FROM Employee JOIN (SELECT team_id, COUNT(employee_id) AS team_size
                    FROM Employee
                    GROUP BY team_id) A USING (team_id);
                    
1280. Students and Examinations - do not fully understand

cross-join just joins everything between two tables (brute force)

SELECT stu.student_id, stu.student_name, sbj.subject_name, COUNT(exam.subject_name) AS attended_exams
FROM Students stu CROSS JOIN Subjects sbj  /*does not establish relationship - combine everything*/
LEFT JOIN Examinations exam

ON exam.student_id = stu.student_id AND sbj.subject_name = exam.subject_name

GROUP BY stu.student_id, sbj.subject_name
ORDER BY stu.student_id, sbj.subject_name;


*A good method to calculate MAX is to ORDER BY DESC and LIMIT 1


1) Average Selling Price - DID NOT FLASH - this question requires some thinking

SUM(price*units) IS THE IMPORTANT PART. purchase_date BETWEEN start_date AND end_date is important too.

SELECT product_id, ROUND(SUM(price*units)/SUM(units),2) AS average_price    /*the SUM(price*units)*/
FROM prices JOIN UnitsSold USING (product_id)
WHERE purchase_date BETWEEN start_date AND end_date
GROUP BY product_id
ORDER BY product_id;


2) Product Sales Analysis I - somewhat common on test  - FLASHED

SELECT product_name, year, price
FROM product JOIN sales USING (product_id);


3) Product Sales Analysis II - somewhat common on test - FLASHED

SELECT product_id, SUM(quantity) AS total_quantity
FROM Sales LEFT JOIN Product USING(product_id)
GROUP BY product_id
ORDER BY product_id;

OR

SELECT product_id, SUM(quantity) AS total_quantity
FROM Sales JOIN Product USING(product_id)
GROUP BY Sales.product_id;

OR

SELECT product_id, SUM(quantity) AS total_quantity
FROM Sales
GROUP BY product_id
ORDER By product_id DESC;


4) Game Play Analysis I - common on test - FLASHED

SELECT player_id, MIN(event_date) AS first_login
FROM Activity
GROUP BY player_id;


5) Big Countries - VERY COMMON - FLASHED

SELECT name, population, area
FROM World
WHERE area > 3000000 OR population > 25000000;

*flashed on paper


6) Immediate Food Delivery I - learn AVG with conditional - common on test - DID NOT FLASH

SELECT ROUND(100*(AVG(order_date = customer_pref_delivery_date),2) AS immediate_percentage  /*seems like AVG with (condition)*/
FROM delivery;

*did 2nd/3rd try on paper


7) Shortest Distance in a Line - DID NOT FLASH - got it the 2nd time

Calculate the distance between 2 points first, then display the minimum one.

To get the distances of each two points, we need to join this table with itself and use ABS() function.

SELECT MIN(ABS(p1.x-p2.x)) AS shortest
FROM point p1 JOIN point p2                /*not joining by X because otherwise it'll have the same thing*/
WHERE p1.x <> p2.x;

previous answer:

SELECT MIN(ABS(P1.x-P2.x)) AS shortest
FROM point P1 JOIN point P2 ON P1.x != P2.x;   /*self-join and NOT equal*/

or

SELECT MIN(ABS(p1.x-p2.x)) AS shortest
FROM point p1 JOIN point p2 ON p1.x <> p2.x;   /*have to remember thsi part JOIN ON p1.x <> p2.x */

*did on 2nd/3rd try on paper


8) Reformat Department Table - VERY COMMON - DID NOT FLASH.... SUM(CASE WHEN month = 'Jan' THEN revenue END) AS

SELECT id,
SUM(CASE WHEN month = 'Jan' THEN revenue END) AS Jan_Revenue,
SUM(CASE WHEN month = 'Feb' THEN revenue END) AS Feb_Revenue,
SUM(CASE WHEN month = 'Mar' THEN revenue END) AS Mar_Revenue,
SUM(CASE WHEN month = 'Apr' THEN revenue END) AS Apr_Revenue,
SUM(CASE WHEN month = 'May' THEN revenue END) AS May_Revenue,
SUM(CASE WHEN month = 'Jun' THEN revenue END) AS Jun_Revenue,
SUM(CASE WHEN month = 'Jul' THEN revenue END) AS Jul_Revenue,
SUM(CASE WHEN month = 'Aug' THEN revenue END) AS Aug_Revenue,
SUM(CASE WHEN month = 'Sep' THEN revenue END) AS Sep_Revenue,
SUM(CASE WHEN month = 'Oct' THEN revenue END) AS Oct_Revenue,
SUM(CASE WHEN month = 'Nov' THEN revenue END) AS Nov_Revenue,
SUM(CASE WHEN month = 'Dec' THEN revenue END) AS Dec_Revenue
FROM Department
GROUP BY id;

*did on 2nd/3rd try on paper


9) Number of Comments per Post - a bit more difficult - answer makes sense now - DID NOT FLASH

first - we only care about the sub_id that have parent_id that is NULL

SELECT S1.sub_id AS post_id, COUNT(DISTINCT S2.sub_id) AS number_of_comments
FROM Submissions S1 LEFT JOIN Submissions S2 ON S1.sub_id = S2.parent_id     /*need LEFT JOIN otherwise S2.parent_id has no "12"*/
WHERE S1.parent_id IS NULL      /*the question only wants answer from where S1.parent_id IS NULL*/
GROUP BY S1.sub_id;

*did on 3rd try on paper


10) Actors and Directors Who Cooperated At Least Three Times - DID NOT FLASH

SELECT actor_id, director_id
FROM ActorDirector
GROUP BY actor_id, director_id      /*no parentheses*/
HAVING COUNT(*) >= 3;

*GROUP BY actor_id - put all those with the same value for X in the one group
*GROUP BY actor_id, director_id - put all those with the same values for BOTH x and y in the one group

*did on 2nd try on paper


11) Article Views I  - common on test - FLASHED

SELECT DISTINCT author_id AS id
FROM Views
WHERE author_id = viewer_id
ORDER BY id ASC;                          /*I guess always do the ORDER BY ASC or DESC*/


SELECT DISTINCT author_id AS id
FROM Views
GROUP BY author_id, viewer_id
HAVING COUNT(*) > 3;                         /*this did not work*/ why?


*did it on 2nd try on paper

12) Swap Salary - single UPDATE statement, IF statement - VERY COMMON - REMEMBER UPDATE SET - DID NOT FLASH

UPDATE salary
SET sex = IF(sex = 'm', 'f', 'm');

*did it on 2nd try on paper 


13) Sales Analysis I - DID NOT FLASH

SELECT seller_id
FROM Sales
GROUP BY seller_id
HAVING SUM(price) = (SELECT SUM(price)
                     FROM Sales
                     GROUP BY seller_id
                     ORDER BY SUM(price) DESC
                     LIMIT 1)
ORDER BY seller_id;


SELECT seller_id
FROM (SELECT seller_id
      FROM Sales
      GROUP BY seller_id
      ORDER BY SUM(price) DESC
      LIMIT 1) as a
GROUP BY seller_id
ORDER BY seller_id;  /*DID NOT WORK - this will only return 1 seller_id
                       you have to compare SUM(price)*/


SELECT seller_id
FROM Sales
GROUP BY seller_id
WHERE NOT EXISTS price < (
                          SELECT SUM(price)
                          FROM Sales
                          GROUP BY seller_id);      /*DID NOT WORK*/
                     
                                 
14) Find Customer Referee - common on test - FLASHED

SELECT name
FROM customer
WHERE referee_id IS NULL OR referee_id <> 2;

*redid 1 time on paper - did not flash


15) Customer Placing the Largest Number of Orders - DID NOT FLASH

SELECT customer_number
FROM orders
GROUP BY customer_number
ORDER BY COUNT(customer_number) DESC      /*customer number 3 COUNTS two times*/
LIMIT 1;

*took 2 tries on paper - it was somewhat easy though.... just have to remember concept hm

16) Queries Quality and Percentage - AVG(rating < 3) -> AVG condition   - REDO - this one is a little bit weird. Remember
AVG(rating < 3). AVG(rating/position) on SQLiteStudio seems to give a different answer...

SELECT query_name, ROUND(AVG(rating/position),2) AS quality, ROUND(AVG(rating <3)*100, 2) AS poor_query_percentage
FROM Queries
GROUP BY query_name
ORDER BY quality DESC;



17) Not Boring Movies - common on test

SELECT id, movie, description, rating
FROM cinema
WHERE description <> 'boring' AND (id%2) <> 0
ORDER BY rating DESC;

*flashed it

18) Triangle Judgement - VERY COMMON on test - IF or CASE statement - 

SELECT *
IF (x + y > z, x + z > y, y + z > x, 'Yes', 'No') AS triangle     /*triangle here is the column display header*/
FROM triangle;                                                    /*pull from the actual triangle table*/

OR

SELECT x, y, z
CASE
  WHEN x + y > z AND x + z > y AND y + z > x THEN 'Yes'
  ELSE 'No'
END AS Triangle
FROM Triangle;


19) Employee Bonus - REDO - LEFT JOIN to keep the NULLS from the LEFT table

SELECT name, bonus
FROM Employee LEFT JOIN Bonus USING(empId)
WHERE bonus < 1000 OR bonus IS NULL;

*flashed it on paper - just needed to remember LEFT JOIN

20) Project Employees I

SELECT project_id, ROUND(AVG(experience_year),2) AS average_years
FROM Project JOIN Employee USING(employee_id)
GROUP BY project_id;

*flashed it on paper

OR

SELECT project_id, CAST(AVG(experience_years) AS DECIMAL (10,2)) AS average_years
FROM Project JOIN Employee USING (employee_id)
GROUP BY project_id;



*****
CAST AS DECIMAL (10,2) - means 10 digits in total, with 2 after the decimal.

CREATE TABLE dbo.MyTable  
(  
  MyDecimalColumn decimal(5,2)  
,MyNumericColumn numeric(10,5)
  
);  
  
Answer:

 MyDecimalColumn                         MyNumericColumn  
--------------------------------------- ---------------------------------------  
123.00                                  12345.12000  


21) Consecutive Available Seats - just have to understand the JOIN ON criteria, consecutive seating, and boolean

SELECT DISTINCT C1.seat_id
FROM cinema C1 JOiN cinema C2 ON ABS(C1.seat_id - C2.seat_id) = 1   /*to test consecutive seating*/ /*ON as criteria */
AND C1.free = TRUE AND C2.free = TRUE       /*boolean */
ORDER BY C1.seat_id;

*did on 2nd try on paper

22) Reported Posts - quite common on test

SELECT extra AS report_reason, COUNT(DISTINCT post_id) AS report_count
FROM Actions
WHERE action_date = '2019-07-04' AND action = 'report'
GROUP BY extra
ORDER BY report_count ASC;

*did on 2nd try on paper

23) Sales Person - all salespeople who did not sell to company 'RED', i.e. com_id = 1 - a bit harder. Have to 
really understand the logic and all the tables.

SELECT salesperson.name
FROM salesperson 
WHERE salesperson.sales_id NOT IN(
                                  SELECT salesperson.sales_id
                                  FROM salesperson JOIN orders USING (sales_id) JOIN company USING (com_id)
                                  WHERE company.name = 'RED');

*got it after 2nd, 3rd try of understanding relationship on paper

24) Duplicate Emails - Quite common on test

SELECT Email
FROM Person
GROUP BY Email
HAVING COUNT(*) > 1;

*flashed on paper 

25) Combine Two Tables - VERY COMMON

SELECT FirstName, LastName, City, State
FROM Person LEFT JOIN Address USING (PersonId);   /*LEFT JOIN - to keep the NULLS*/

*messed up the using JOIN ON instead of USING - redo again


26) Game Play Analysis II - need to redo - WHERE("1", "2") IN 

SELECT player_id, device_id
FROM Activity 
WHERE (player_id, event_date) IN(
                                 SELECT player_id, MIN(event_date)
                                 FROM Activity
                                 GROUP BY player_id);


27) User Activity for the Past 30 Days I - not too bad - study and REDO

SELECT activity_date AS day, COUNT(DISTINCT(user_id) AS active_users
FROM Activity
WHERE activity_date BETWEEN '2019-06-28' AND  '2019-07-27'          /*BETWEEN dates*/
GROUP BY day;

*got it after 1st try - activity_date BETWEEN the dates, not activity_date > 2019-07-20

28) Sales Analysis III - quite common on test - DO NOT UNDERSTAND - NEED TO STUDY THIS - look at discussion for why the answer is the way 
it is.

SELECT product_id, product_name
FROM product
WHERE product_id IN(SELECT product_id
                    FROM Sales
                    GROUP BY product_id
                    HAVING MIN(sale_date) >= '2019-01-01' AND MAX(sale_date) <= '2019-03-31');

OR

SELECT product_id, product_name
FROM Product  JOIN Sales USING (product_id)
GROUP BY Product.product_id
HAVING COUNT(*) = SUM(
                      CASE 
                        WHEN sale_date BETWEEN '2019-01-01' AND '2019-03-31' THEN 1 
                        ELSE 0 
                       END);


The SQL CASE Statement
The CASE statement goes through conditions and returns a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.

If there is no ELSE part and no conditions are true, it returns NULL.

CASE Syntax
CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;


OR
 


29) Project Employees II - need to REDO - a bit harder

SELECT project_id 
FROM Project
GROUP BY project_id
HAVING COUNT(employee_id) = (
                             SELECT COUNT(employee_id) 
                             FROM Project 
                             GROUP BY project_id 
                             ORDER BY count(employee_id) DESC 
                             LIMIT 1);


30) Employees Earning More Than Their Managers - VERY COMMON

SELECT E1.Name AS Employee 
FROM Employee E1, Employee E2                           /*this type of JOIN - select information twice don't need JOIN USING
WHERE E1.ManagerId = E2.Id AND E1.Salary > E2.Salary;   /*E1.Id = E2.ManagerId is the key here

*got 2nd time on paper

31) Sales Analysis II - REDO

Select list who bought S8, select list who bought iphone. Select only list who bought S8 and not list who bought iPhone

SELECT DISTINCT buyer_id
FROM Sales JOIN Product USING(product_id)
WHERE product_name = 'S8'
AND buyer_id NOT IN(SELECT buyer_id
                    FROM Sales JOIN Product USING(product_id)
                    WHERE product_name = 'iPhone');


*got on 2nd and 3rd try on paper



32) Customers Who Never Order - very common

SELECT Name AS Customers
FROM Customers 
WHERE Customers.Id NOT IN (
                            SELECT CustomerId
                            FROM Orders);

*flashed on paper

32) Friend Requests I: Overall Acceptance Rate - Quite common - NEED TO REDO - kind of hard 

/*IFNULL (expression, alt_value)*/

IFNULL() function lets you return an alternative value if an expression if NULL

1) Count the number of acceptance

SELECT COUNT(*)
FROM(SELECT DISTINCT requester_id, accepter_id
     FROM request_accepted)
     
2) Count the total # of requests from friend_request

SELECT COUNT(*)
FROM(SELECT DISTINCT sender_id, send_to_id
    FROM friend_request)
    
3) Divide 1/2. But divisor could be zero if friend_request table is empty. So we have to use IFNULL

SELECT ROUND(
IFNULL(
       (SELECT COUNT(*)
        FROM (SELECT DISTINCT requester_id, accepter_id FROM request_accepted)
       /
       (SELECT COUNT(*)
        FROM (SELECT DISTINCT sender_id, send_to_id FROM friend_request)
       , 0)
,2) AS accepted_rate;

                      
33) Biggest Single Number - REDO

SELECT MAX(num) AS num                  /*select the largest number from the subquery of distinct numbers*/
FROM my_numbers
WHERE num IN(SELECT num
             FROM my_numbers
             GROUP BY num
             HAVING COUNT(*) <= 1);       /*sub-query selects only distinct numbers*/

OR

SELECT MAX(num) AS num
FROM (SELECT num
      FROM my_numbers
      GROUP BY num
      HAVING COUNT(*) <= 1) AS a;
      

*took 2-3 tries on paper. but didn't really need to look at answer key


34) Classes More Than 5 Students 

SELECT class
FROM courses
GROUP BY class
HAVING COUNT(DISTINCT student) >= 5;

*flashed it on paper

35) Rising Temperature - somewhat common - involves dates - DATEDIFF() function to compare two date type values 

SELECT W1.Id
FROM Weather W1, Weather W2                       /*don't need to particularly join anything, just self join itself - cannot use JOIN USING*/
WHERE DATEDIFF(W1.RecordDate, W2.RecordDate) = 1 
AND W1.Temperature > W2.Temperature

*took 2 tries to get it - but understand answer


36) Delete Duplicate Emails - quite common - need to redo - WHAT DOES A SELF-JOIN TABLE LOOK LIKE? Depends on the WHERE condition
*Have to upload on SQLITE and try it out....

DELETE P1                                     /*remember this DELETE syntax*/
FROM Person P1, Person P2                     /*self-join - just stacks itself horizontally?*/
WHERE P1.Email = P2.Email AND P1.Id > P2.Id   /*has to be P1.Id GREATER THAN, not GREATER AND EQUAL TO */

FROM the conditions the self-join table should look like this??:

1 john@example.com    NULL
2 bob@example.com     NULL
3 john@example.com    1 john@example.com


37) User Activity for the Past 30 Days II - somewhat common - need to redo - need to figure out the AVG and COUNT

SELECT IFNULL(ROUND(AVG(num),2),0.00) AS average_sessions_per_user    /*figure out the AVG and COUNT later*/
FROM(SELECT COUNT(DISTINCT session_id) AS num
     FROM Activity
     WHERE DATEDIFF('2019-07-27', activity_date) < 30               /*DATEDIFF - activity_date less 2019-07-27 is less than 30 */
     GROUP BY user_id) AS c;                                        /*need the AS c for SQL purposes only


*DATEDIFF example:

CASE 
    WHEN DATEDIFF(day, required_date, shipped_date) < 0
    THEN 'Late'
    ELSE 'OnTime'
   
*if required_date = shipped_date then, difference is 0 => OnTime
if required date (2016-01-04) is > shipped_date (2016-01-03) then, difference is less than 0 => Late (implies shipped_date LESS required_date)
if required date (2016-01-04) is < shipped_date (2016-01-05) then, difference is positive => OnTime   



38) Second Highest Salary - VERY COMMON

SELECT MAX(Salary) AS SecondHighestSalary
FROM Employee 
WHERE Salary < (SELECT MAX (salary)
                FROM Employee);
                   
*flashed it on paper 

DONE! THAT IS ALL THE EASY LEETCODE QUESTIONS - CONGRATULATIONS!






